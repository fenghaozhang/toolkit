// WARNING: This file is generated by bind_callback.py.  DO NOT edit here.
// GLOBAL_NOLINT

#ifndef _SRC_BASE_BIND_CALLBACK_H
#define _SRC_BASE_BIND_CALLBACK_H

#include <google/protobuf/stubs/common.h>  // for Closure
#include "src/base/call_traits.h"

namespace bind_callback_details
{

const uint64_t BIND_CALLBACK_MAGIC        = 0x4c4c4143444e4942ULL;  // "BINDCALL"
const uint64_t BIND_CALLBACK_FREED_OBJECT = 0x4c4c414345455246ULL;  // "FREECALL"

#ifdef __DEBUG__
void CheckMagic(uint64_t magic);
#endif  // __DEBUG__

}  // namespace bind_callback_details

// Here defines a family of BindCallback templates.
//
// These templates implement interface google::protobuf::Closure.  Unlike
// NewCallback, BindMethod does no memory allocation or free at all, which
// is useful in latency-sensitive scenarios.  A user owns the full  life-
// cycle.  It is recommended to use it with a memory pool.
//
// Example 1: Bind to member methods of class.
//
//     class Clazz
//     {
//     pubilc:
//          void M0();
//          void M1(int);
//          void M2(int, int);
//     };
//
//     Clazz obj;
//
//     BindCallbackM0<Clazz> m0;
//     m0.Bind(&obj, &Clazz::M0);
//     m0.Run();  // calls obj.M0()
//
//     BindCallbackM1<Clazz, int> m1;
//     m1.Bind(&obj, &Clazz::M1, 10);
//     m1.Run();  // calls obj.M1(10);
//
//     BindCallbackM2<Clazz, int, int> m2;
//     m2.Bind(&obj, &Clazz::M2, 10, 20);
//     m2.Run();  // calls obj.M2(10, 20);
//
// Example 2: Bind to global functions.
//
//     void F0();
//     void F1(int);
//     void F2(int, int);
//
//     BindCallbackF0 f0;
//     f0.Bind(&F0);
//     b0.Run();  // calls F0()
//
//     BindCallbackF1<int> f1;
//     f1.Bind(&F1, 10);
//     f1.Run();  // calls F1(10)
//
//     BindCallbackF2<int, int> f2;
//     f2.Bind(&F2, 10, 20);
//     f2.Run();  // calls F2(10, 20)
//
// Example 3: Callback with arguments
//
//     class Clazz
//     {
//     pubilc:
//          void M1R2(int arg0, const std::string& result0, int result1);
//     };
//
//     Clazz obj;
//     BindCallbackM1R2<Clazz,
//         int /* arg0 */,
//         std::string /* result0 */,
//         int /* result1 */> callback;
//     callback.Bind(&obj, &Clazz::M1R2, 100 /* arg0 */);
//     callback.SetResult0(200);
//     callback.SetResult1("hello");
//     callback.Run();  // calls Clazz::M1R2(100, 200, "hello")

template <typename Result0>
class BindCallbackR1 : public google::protobuf::Closure
{
public:
    BindCallbackR1() : mResult0(Result0()) {}
    typename call_traits<Result0>::param_type GetResult0() const { return mResult0; }
    void SetResult0(typename call_traits<Result0>::param_type r) { mResult0 = r; }
    Result0* MutableResult0() { return &mResult0; }

protected:
    Result0 mResult0;
};

template <typename Result0, typename Result1>
class BindCallbackR2 : public google::protobuf::Closure
{
public:
    BindCallbackR2() : mResult0(Result0()), mResult1(Result1()) {}
    typename call_traits<Result0>::param_type GetResult0() const { return mResult0; }
    void SetResult0(typename call_traits<Result0>::param_type r) { mResult0 = r; }
    Result0* MutableResult0() { return &mResult0; }

    typename call_traits<Result1>::param_type GetResult1() const { return mResult1; }
    void SetResult1(typename call_traits<Result1>::param_type r) { mResult1 = r; }
    Result1* MutableResult1() { return &mResult1; }

protected:
    Result0 mResult0;
    Result1 mResult1;
};

template <typename Result0, typename Result1, typename Result2>
class BindCallbackR3 : public google::protobuf::Closure
{
public:
    BindCallbackR3() : mResult0(Result0()), mResult1(Result1()), mResult2(Result2()) {}
    typename call_traits<Result0>::param_type GetResult0() const { return mResult0; }
    void SetResult0(typename call_traits<Result0>::param_type r) { mResult0 = r; }
    Result0* MutableResult0() { return &mResult0; }

    typename call_traits<Result1>::param_type GetResult1() const { return mResult1; }
    void SetResult1(typename call_traits<Result1>::param_type r) { mResult1 = r; }
    Result1* MutableResult1() { return &mResult1; }

    typename call_traits<Result2>::param_type GetResult2() const { return mResult2; }
    void SetResult2(typename call_traits<Result2>::param_type r) { mResult2 = r; }
    Result2* MutableResult2() { return &mResult2; }

protected:
    Result0 mResult0;
    Result1 mResult1;
    Result2 mResult2;
};

template <typename Class>
class BindCallbackM0 : public google::protobuf::Closure
{
public:
    typedef void (Class::*Method)();

    BindCallbackM0() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL) {}

    ~BindCallbackM0()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)();
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
};

template <typename Class, typename Result0>
class BindCallbackM0R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (Class::*Method)(typename call_traits<Result0>::param_type);

    BindCallbackM0R1() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL) {}

    ~BindCallbackM0R1()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(this->mResult0);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
};

template <typename Class, typename Result0, typename Result1>
class BindCallbackM0R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (Class::*Method)(typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackM0R2() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL) {}

    ~BindCallbackM0R2()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(this->mResult0, this->mResult1);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
};

template <typename Class, typename Result0, typename Result1, typename Result2>
class BindCallbackM0R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (Class::*Method)(typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackM0R3() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL) {}

    ~BindCallbackM0R3()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(this->mResult0, this->mResult1, this->mResult2);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
};

template <typename Class, typename Arg0>
class BindCallbackM1 : public google::protobuf::Closure
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type);

    BindCallbackM1() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()) {}

    ~BindCallbackM1()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
};

template <typename Class, typename Arg0, typename Result0>
class BindCallbackM1R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackM1R1() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()) {}

    ~BindCallbackM1R1()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, this->mResult0);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
};

template <typename Class, typename Arg0, typename Result0, typename Result1>
class BindCallbackM1R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackM1R2() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()) {}

    ~BindCallbackM1R2()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, this->mResult0, this->mResult1);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
};

template <typename Class, typename Arg0, typename Result0, typename Result1, typename Result2>
class BindCallbackM1R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackM1R3() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()) {}

    ~BindCallbackM1R3()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
};

template <typename Class, typename Arg0, typename Arg1>
class BindCallbackM2 : public google::protobuf::Closure
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type);

    BindCallbackM2() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    ~BindCallbackM2()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Class, typename Arg0, typename Arg1, typename Result0>
class BindCallbackM2R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackM2R1() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    ~BindCallbackM2R1()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, this->mResult0);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Class, typename Arg0, typename Arg1, typename Result0, typename Result1>
class BindCallbackM2R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackM2R2() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    ~BindCallbackM2R2()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, this->mResult0, this->mResult1);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Class, typename Arg0, typename Arg1, typename Result0, typename Result1, typename Result2>
class BindCallbackM2R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackM2R3() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    ~BindCallbackM2R3()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Class, typename Arg0, typename Arg1, typename Arg2>
class BindCallbackM3 : public google::protobuf::Closure
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type);

    BindCallbackM3() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    ~BindCallbackM3()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, mArg2);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Class, typename Arg0, typename Arg1, typename Arg2, typename Result0>
class BindCallbackM3R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackM3R1() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    ~BindCallbackM3R1()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, mArg2, this->mResult0);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Class, typename Arg0, typename Arg1, typename Arg2, typename Result0, typename Result1>
class BindCallbackM3R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackM3R2() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    ~BindCallbackM3R2()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, mArg2, this->mResult0, this->mResult1);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Class, typename Arg0, typename Arg1, typename Arg2, typename Result0, typename Result1, typename Result2>
class BindCallbackM3R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (Class::*Method)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackM3R3() : mMagic(bind_callback_details::BIND_CALLBACK_MAGIC), mObject(NULL), mMethod(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    ~BindCallbackM3R3()
    {
#ifdef __DEBUG__
         bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
         mMagic = bind_callback_details::BIND_CALLBACK_FREED_OBJECT;
    }

    void Bind(Class* object, Method method, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        mObject = object;
        mMethod = method;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
#ifdef __DEBUG__
        bind_callback_details::CheckMagic(mMagic);
#endif  // __DEBUG__
        (mObject->*mMethod)(mArg0, mArg1, mArg2, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    uint64_t mMagic;
    Class*   mObject;
    Method   mMethod;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

class BindCallbackF0 : public google::protobuf::Closure
{
public:
    typedef void (*Function)();

    BindCallbackF0() : mFunction(NULL) {}

    void Bind(Function function)
    {
        mFunction = function;
    }

    /* override */ void Run()
    {
        mFunction();
    }

private:
    Function mFunction;
};

template <typename Result0>
class BindCallbackF0R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (*Function)(typename call_traits<Result0>::param_type);

    BindCallbackF0R1() : mFunction(NULL) {}

    void Bind(Function function)
    {
        mFunction = function;
    }

    /* override */ void Run()
    {
        mFunction(this->mResult0);
    }

private:
    Function mFunction;
};

template <typename Result0, typename Result1>
class BindCallbackF0R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (*Function)(typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackF0R2() : mFunction(NULL) {}

    void Bind(Function function)
    {
        mFunction = function;
    }

    /* override */ void Run()
    {
        mFunction(this->mResult0, this->mResult1);
    }

private:
    Function mFunction;
};

template <typename Result0, typename Result1, typename Result2>
class BindCallbackF0R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (*Function)(typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackF0R3() : mFunction(NULL) {}

    void Bind(Function function)
    {
        mFunction = function;
    }

    /* override */ void Run()
    {
        mFunction(this->mResult0, this->mResult1, this->mResult2);
    }

private:
    Function mFunction;
};

template <typename Arg0>
class BindCallbackF1 : public google::protobuf::Closure
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type);

    BindCallbackF1() : mFunction(NULL), mArg0(Arg0()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0)
    {
        mFunction = function;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
        mFunction(mArg0);
    }

private:
    Function mFunction;
    Arg0 mArg0;
};

template <typename Arg0, typename Result0>
class BindCallbackF1R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackF1R1() : mFunction(NULL), mArg0(Arg0()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0)
    {
        mFunction = function;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, this->mResult0);
    }

private:
    Function mFunction;
    Arg0 mArg0;
};

template <typename Arg0, typename Result0, typename Result1>
class BindCallbackF1R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackF1R2() : mFunction(NULL), mArg0(Arg0()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0)
    {
        mFunction = function;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, this->mResult0, this->mResult1);
    }

private:
    Function mFunction;
    Arg0 mArg0;
};

template <typename Arg0, typename Result0, typename Result1, typename Result2>
class BindCallbackF1R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackF1R3() : mFunction(NULL), mArg0(Arg0()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0)
    {
        mFunction = function;
        mArg0 = arg0;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    Function mFunction;
    Arg0 mArg0;
};

template <typename Arg0, typename Arg1>
class BindCallbackF2 : public google::protobuf::Closure
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type);

    BindCallbackF2() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Arg0, typename Arg1, typename Result0>
class BindCallbackF2R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackF2R1() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, this->mResult0);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Arg0, typename Arg1, typename Result0, typename Result1>
class BindCallbackF2R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackF2R2() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, this->mResult0, this->mResult1);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Arg0, typename Arg1, typename Result0, typename Result1, typename Result2>
class BindCallbackF2R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackF2R3() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
};

template <typename Arg0, typename Arg1, typename Arg2>
class BindCallbackF3 : public google::protobuf::Closure
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type);

    BindCallbackF3() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, mArg2);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Result0>
class BindCallbackF3R1 : public BindCallbackR1<Result0>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type);

    BindCallbackF3R1() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, mArg2, this->mResult0);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Result0, typename Result1>
class BindCallbackF3R2 : public BindCallbackR2<Result0, Result1>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type);

    BindCallbackF3R2() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, mArg2, this->mResult0, this->mResult1);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Result0, typename Result1, typename Result2>
class BindCallbackF3R3 : public BindCallbackR3<Result0, Result1, Result2>
{
public:
    typedef void (*Function)(typename call_traits<Arg0>::param_type, typename call_traits<Arg1>::param_type, typename call_traits<Arg2>::param_type, typename call_traits<Result0>::param_type, typename call_traits<Result1>::param_type, typename call_traits<Result2>::param_type);

    BindCallbackF3R3() : mFunction(NULL), mArg0(Arg0()), mArg1(Arg1()), mArg2(Arg2()) {}

    void Bind(Function function, typename call_traits<Arg0>::param_type arg0, typename call_traits<Arg1>::param_type arg1, typename call_traits<Arg2>::param_type arg2)
    {
        mFunction = function;
        mArg0 = arg0;
        mArg1 = arg1;
        mArg2 = arg2;
    }

    /* override */ void Run()
    {
        mFunction(mArg0, mArg1, mArg2, this->mResult0, this->mResult1, this->mResult2);
    }

private:
    Function mFunction;
    Arg0 mArg0;
    Arg1 mArg1;
    Arg2 mArg2;
};


#endif  // _SRC_BASE_BIND_CALLBACK_H
